using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using vMixAPI;
using vMixController.Classes;
using vMixController.Converters;
using vMixController.PropertiesControls;
using vMixController.ViewModel;

namespace vMixController.Widgets
{
    [Serializable]
    public class vMixControlTextField : vMixControl
    {

        internal bool _updating = false;

        public override string Type
        {
            get
            {
                return "Text Field";
            }
        }

        public vMixControlTextField()
        {
            _paths.CollectionChanged += _paths_CollectionChanged;
        }

        internal override void OnStateUpdated()
        {
            UpdateText(_paths);
        }

        private void _paths_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
                foreach (var item in e.NewItems)
                    UpdateText((sender as IList).OfType<Pair<int, string>>().ToList());
        }

        public string Text
        {
            get { return (string)GetValue(TextProperty); }
            set { SetValue(TextProperty, value); }
        }

        // Using a DependencyProperty as the backing store for Text.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty TextProperty =
            DependencyProperty.Register("Text", typeof(string), typeof(vMixControlTextField), new PropertyMetadata("", InternalPropertyChanged));

        private static void InternalPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (e.Property.Name == "Text")
            {
                var obj = (vMixControlTextField)d;
                if (obj._updating) return;
                var text = e.NewValue as string;
                if (obj.Paths != null && obj.State != null)
                    foreach (var item in obj.Paths)
                    {
                        var input = (Input)obj.GetValueByPath(obj.State, string.Format("Inputs[{0}]", item.A));
                        if (input != null)
                        {
                            var val = input.Elements.Where(x => (x is InputText) && (x as InputText).Name == item.B).FirstOrDefault();

                            if (val != null)
                                ((InputText)val).Text = text;
                        }
                    }
            }
        }

        internal virtual void UpdateText(IList<Pair<int, string>> _paths)
        {
            _updating = true;

            BindingOperations.ClearBinding(this, TextProperty);
            MultiBinding binding = new MultiBinding();
            binding.Converter = new FirstValueConverter();
            binding.Mode = BindingMode.TwoWay;

            InputText text = null;

            //update text
            if (_paths != null && State != null)
                foreach (var item in _paths)
                {
                    var input = (Input)GetValueByPath(State, string.Format("Inputs[{0}]", item.A));
                    if (input != null)
                    {
                        var val = input.Elements.Where(x => (x is InputText) && (x as InputText).Name == item.B).FirstOrDefault();

                        if (val != null && val is InputText)
                        {
                            if (text == null)
                                text = (val as InputText);
                            else
                                (val as InputText).Text = text.Text;
                        }

                        Binding b = new Binding("Text");
                        b.Source = val;
                        b.Mode = BindingMode.TwoWay;
                        b.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
                        binding.Bindings.Add(b);
                    }
                }

            BindingOperations.SetBinding(this, TextProperty, binding);

            if (text != null)
                Text = text.Text;


            _updating = false;
        }

        /// <summary>
        /// The <see cref="Paths" /> property's name.
        /// </summary>
        public const string PathsPropertyName = "Paths";

        private ObservableCollection<Pair<int, string>> _paths = new ObservableCollection<Pair<int, string>>();

        /// <summary>
        /// Sets and gets the Paths property.
        /// Changes to that property's value raise the PropertyChanged event. 
        /// </summary>
        public ObservableCollection<Pair<int, string>> Paths
        {
            get
            {
                return _paths;
            }

            set
            {
                if (_paths == value)
                {
                    return;
                }

                _paths = value;
                RaisePropertyChanged(PathsPropertyName);
            }
        }

        public override UserControl[] GetPropertiesControls()
        {
            TitleMappingControl control = null;
            if (ControlsStore.ContainsKey(typeof(TitleMappingControl)))
                control = (TitleMappingControl)ControlsStore[typeof(TitleMappingControl)];
            else
            {
                control = new TitleMappingControl();
                ControlsStore.Add(typeof(TitleMappingControl), control);
            }
            control.Titles.Clear();
            foreach (var item in _paths)
                control.Titles.Add(item);

            return base.GetPropertiesControls().Concat(new UserControl[] { control }).ToArray();
        }

        public override void SetProperties(vMixControlSettingsViewModel viewModel)
        {
            base.SetProperties(viewModel);

            Paths.Clear();
            foreach (var item in (viewModel.WidgetPropertiesControls.OfType<TitleMappingControl>().First()).Titles)
                Paths.Add(item);
        }
    }
}
