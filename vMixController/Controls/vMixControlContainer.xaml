<UserControl
            x:Class="vMixController.Controls.vMixControlContainer"
             xmlns:vm="clr-namespace:vMixController.ViewModel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:e="clr-namespace:vMixController.Extensions"
             xmlns:local="clr-namespace:vMixController.Controls"
             xmlns:cls="clr-namespace:vMixController.Classes"
             xmlns:conv="clr-namespace:vMixController.Converters"
             xmlns:wpfc="clr-namespace:NKristek.Wpf.Converters;assembly=NKristek.Wpf.Converters"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             x:Name="CC" SizeChanged="CC_SizeChanged" PreviewMouseMove="CC_PreviewMouseMove">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/vMixControllerSkin;component/MainSkin.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <!--<conv:BrightnessToColorConverter x:Key="BrightnessToColor"/>-->
            <local:LockButtonConverter x:Key="LockButtonConverter"/>
            <ControlTemplate x:Key="MoveThumbTemplate" TargetType="{x:Type local:vMixControlMoveThumb}">
                <Rectangle Fill="Transparent"/>
            </ControlTemplate>
            <ControlTemplate x:Key="ResizeThumbTemplate" TargetType="{x:Type local:vMixControlResizeThumb}">
                <Rectangle Fill="Transparent"/>
            </ControlTemplate>
            <FrameworkElement Tag="{Binding ParentContainer.Control, Source={x:Reference CC}}" x:Key="ControlHandler"/>
            <Style TargetType="{x:Type local:vMixControlResizeThumb}">
                <Style.Triggers>
                    <Trigger Property="HorizontalAlignment" Value="Right">
                        <Setter Property="Margin" Value="4,0,-4,0"/>
                    </Trigger>
                    <Trigger Property="HorizontalAlignment" Value="Left">
                        <Setter Property="Margin" Value="-4,0,4,0"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Storyboard x:Key="OpacityOn">
                <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:0.5" To="1"/>
            </Storyboard>
            <Storyboard x:Key="OpacityOff">
                <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:0.5" To="0"/>
            </Storyboard>
            <FrameworkElement x:Key="ProxyElement" DataContext="{Binding ParentContainer, Source={x:Reference CC}}"/>
        </ResourceDictionary>
    </UserControl.Resources>
    <Border Tag="{Binding ParentContainer, ElementName=CC}" Background="#1E2328" Margin="0" Padding="0" IsHitTestVisible="{Binding ParentContainer.Control.IsGhosted, ElementName=CC, Converter={wpfc:BoolToInverseBoolConverter}}" MouseEnter="Border_MouseEnter" MouseLeave="Border_MouseLeave">
        <Border.Style>
            <Style TargetType="Border">
                <!--Value=""-->
                <Setter Property="BorderBrush" Value="{Binding ParentContainer.BorderColorProxy, ElementName=CC, Converter={conv:ColorToSolidBrushConverter}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ParentContainer.Control.State, ElementName=CC}" Value="{x:Null}">
                        <Setter Property="BorderBrush">
                            <Setter.Value>
                                <DrawingBrush Viewport="0,0,16,16" ViewportUnits="Absolute" TileMode="Tile">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="OrangeRed">
                                                <GeometryDrawing.Geometry>
                                                    <GeometryGroup>
                                                        <RectangleGeometry Rect="0,0,50,50" />
                                                        <RectangleGeometry Rect="50,50,50,50" />
                                                    </GeometryGroup>
                                                </GeometryDrawing.Geometry>
                                            </GeometryDrawing>
                                            <GeometryDrawing Brush="{Binding DataContext.BorderColorProxy, Source={StaticResource ProxyElement}, Converter={conv:ColorToSolidBrushConverter}}">
                                                <GeometryDrawing.Geometry>
                                                    <GeometryGroup>
                                                        <RectangleGeometry Rect="50,0,50,50" />
                                                        <RectangleGeometry Rect="0,50,50,50" />
                                                    </GeometryGroup>
                                                </GeometryDrawing.Geometry>
                                            </GeometryDrawing>

                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="BorderThickness" Value="1"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ParentContainer.Control.IsGhosted, ElementName=CC}" Value="True">
                        <Setter Property="Opacity" Value="0.5"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ParentContainer.IsBorderDashed, ElementName=CC}" Value="True">
                        <Setter Property="BorderBrush">
                            <Setter.Value>
                                <DrawingBrush Viewport="0,0,4,4" ViewportUnits="Absolute" TileMode="Tile">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="{Binding DataContext.BorderColorProxy, Source={StaticResource ProxyElement}, Converter={conv:ColorToSolidBrushConverter}}">
                                                <GeometryDrawing.Geometry>
                                                    <GeometryGroup>
                                                        <RectangleGeometry Rect="0,0,50,50" />
                                                        <RectangleGeometry Rect="50,50,50,50" />
                                                    </GeometryGroup>
                                                </GeometryDrawing.Geometry>
                                            </GeometryDrawing>
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Border.Style>
        <Grid Tag="{Binding ParentContainer, ElementName=CC}">
            <Grid.ContextMenu>
                <ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                    <MenuItem Header="Toggle Caption" Command="{Binding ToggleCaptionCommand}" CommandParameter="{Binding Control}">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xf150;</TextBlock>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding SwitchPasswordLockableCommand}" CommandParameter="{Binding Control}" Header="Password Lockable">
                        <MenuItem.Style>
                            <Style TargetType="MenuItem">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Control.IsPasswordLockable}" Value="True">
                                        <Setter Property="Icon">
                                            <Setter.Value>
                                                <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xf14a;</TextBlock>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Control.IsPasswordLockable}" Value="False">
                                        <Setter Property="Icon">
                                            <Setter.Value>
                                                <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xf0c8;</TextBlock>
                                            </Setter.Value>
                                        </Setter>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Control.Locked}" Value="True">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                    </MenuItem>
                    <Separator></Separator>
                    <MenuItem Header="Scale Up" Command="{Binding ScaleUpCommand}" CommandParameter="{Binding Control}" IsEnabled="{Binding Control.Locked, Converter={wpfc:BoolToInverseBoolConverter}}">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xf062;</TextBlock>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Scale Down" Command="{Binding ScaleDownCommand}" CommandParameter="{Binding Control}" IsEnabled="{Binding Control.Locked, Converter={wpfc:BoolToInverseBoolConverter}}">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="/vMixControllerSkin;Component/#FontAwesome">&#xf063;</TextBlock>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Duplicate" Command="{Binding CopyCommand}" CommandParameter="{Binding Control}" IsEnabled="{Binding Control.Locked, Converter={wpfc:BoolToInverseBoolConverter}}">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="/vMixControllerSkin;Component/#Material Design Icons">&#61839;</TextBlock>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem x:Name="MoveToMenu" Tag="{Binding}" Header="Move To" IsEnabled="{Binding Control.Locked, Converter={wpfc:BoolToInverseBoolConverter}}" ItemsSource="{StaticResource Pages}">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="/vMixControllerSkin;Component/#Material Design Icons">&#xf061;</TextBlock>
                        </MenuItem.Icon>
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem">
                                <!--<Setter Property="DataContext">
                                    <Setter.Value>
                                        <cls:ControlIntParameter A="{Binding Tag, Source={StaticResource ControlHandler}}" B=""/>
                                    </Setter.Value>
                                </Setter>-->
                                <Setter Property="Header">
                                    <Setter.Value>
                                        <MultiBinding Converter="{conv:StringListToStringConverter}">
                                            <Binding Source="{StaticResource Locator}" Path="Main.WindowSettings.Pages"/>
                                            <Binding Converter="{conv:ObjectToIndexConverter}" ConverterParameter="{StaticResource Pages}"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Command" Value="{Binding Tag.MoveCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuItem}}"/>
                                <Setter Property="CommandParameter">
                                    <Setter.Value>
                                        <MultiBinding Converter="{conv:ControlIntToParameterConverter}">
                                            <Binding Path="Tag" Source="{StaticResource ControlHandler}"/>
                                            <Binding Converter="{conv:ObjectToIndexConverter}" ConverterParameter="{StaticResource Pages}"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </MenuItem.ItemContainerStyle>
                        <!--Command="{Binding MoveCommand}" CommandParameter="{Binding Control}"-->
                    </MenuItem>
                    <MenuItem Header="Properties" Command="{Binding SettingsCommand}" CommandParameter="{Binding Control}" IsEnabled="{Binding Control.Locked, Converter={wpfc:BoolToInverseBoolConverter}}">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="/vMixControllerSkin;Component/#Material Design Icons">&#62611;</TextBlock>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Remove" Command="{Binding CloseCommand}" CommandParameter="{Binding Control}" IsEnabled="{Binding Control.Locked, Converter={wpfc:BoolToInverseBoolConverter}}">
                        <MenuItem.Icon>
                            <TextBlock FontFamily="/vMixControllerSkin;Component/#Material Design Icons">&#61782;</TextBlock>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </Grid.ContextMenu>
            <StackPanel x:Name="Buttons" Width="{Binding ParentContainer.Control.Width, ElementName=CC}">
                <Grid Visibility="{Binding ParentContainer.Control.IsCaptionOn, Converter={wpfc:BoolToVisibilityConverter}, ElementName=CC}" x:Name="Caption" Style="{StaticResource Caption}" MouseDown="Caption_MouseDown" Background="{Binding ParentContainer.Control.Color, ElementName=CC, Converter={conv:ColorToSolidBrushConverter}}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid VerticalAlignment="Center" Margin="2,0,2,0" HorizontalAlignment="Left">
                        <Grid.Visibility>
                            <Binding Path="Main.WindowSettings.ShowIndividualLock" Source="{StaticResource Locator}" Converter="{wpfc:BoolToVisibilityConverter}"/>
                        </Grid.Visibility>

                        <Button Visibility="{Binding ParentContainer.Control.IsCaptionVisible, Converter={wpfc:BoolToVisibilityConverter}, ElementName=CC}" Style="{StaticResource TitleButton}" x:Name="LockButton" ToolTip="{e:Localize Lock widget}" Command="{Binding Main.SwitchLockCommand, Source={StaticResource Locator}}" CommandParameter="{Binding ParentContainer.Control, ElementName=CC}" Content="{Binding ParentContainer.Control.Locked, Converter={StaticResource LockButtonConverter}, ElementName=CC}" IsEnabled="{Binding ParentContainer.Control.IsPasswordLocked, ElementName=CC, Converter={wpfc:BoolToInverseBoolConverter}}"/>
                    </Grid>

                    <TextBlock VerticalAlignment="Center" Grid.Column="1" Grid.ColumnSpan="2" Style="{StaticResource CaptionText}" Text="{Binding ParentContainer.Caption, ElementName=CC}" Foreground="{Binding ParentContainer.Control.Color, ElementName=CC, Converter={conv:ColorToBlackOrWhiteConverter}}"></TextBlock>
                    <local:vMixControlMoveThumb IsEnabled="{Binding ParentContainer.Control.Locked, ElementName=CC, Converter={wpfc:BoolToInverseBoolConverter}}" Tag="{Binding ParentContainer.Control.Info, ElementName=CC}" Visibility="{Binding ParentContainer.Control.IsCaptionVisible, Converter={wpfc:BoolToVisibilityConverter}, ElementName=CC}" Grid.Column="1" Template="{StaticResource MoveThumbTemplate}" DataContext="{Binding ParentContainer.Control, ElementName=CC}" Cursor="SizeAll">
                        <local:vMixControlMoveThumb.ToolTip>
                            <ToolTip DataContext="{Binding Path=PlacementTarget, RelativeSource={x:Static RelativeSource.Self}}">
                                <StackPanel>
                                    <TextBlock Text="{e:Localize Active Exec Links:}" FontWeight="Bold"/>
                                    <ItemsControl ItemsSource="{Binding Tag}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock><Run Text="{Binding A}" FontWeight="Bold"/>: <Run Text="{Binding B}"/>, <Run FontWeight="Bold" Text="{e:Localize Hotkey:}"/> <Run Text="{Binding C}"/></TextBlock>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </StackPanel>
                            </ToolTip>
                        </local:vMixControlMoveThumb.ToolTip>
                    </local:vMixControlMoveThumb>

                    <StackPanel Opacity="0" x:Name="RightButtons" Margin="1" Grid.Column="2" HorizontalAlignment="Right" Orientation="Horizontal" Visibility="{Binding ParentContainer.Control.Locked, Converter={wpfc:BoolToInverseVisibilityConverter}, ConverterParameter=Hidden, ElementName=CC}">
                        <ContentControl Content="{Binding ParentContainer.CaptionContent, ElementName=CC}"/>
                        <Button FontFamily="/vMixControllerSkin;Component/#FontAwesome" ToolTip="{e:Localize Scale up}" Style="{StaticResource TitleButton}" Margin="1,0,1,0" HorizontalAlignment="Left" Command="{Binding ParentContainer.ScaleUpCommand, ElementName=CC}" CommandParameter="{Binding ParentContainer.Control, ElementName=CC}">&#xf062;</Button>
                        <Button FontFamily="/vMixControllerSkin;Component/#FontAwesome" ToolTip="{e:Localize Scale down}" Style="{StaticResource TitleButton}" Margin="1,0,1,0" HorizontalAlignment="Left" Command="{Binding ParentContainer.ScaleDownCommand, ElementName=CC}" CommandParameter="{Binding ParentContainer.Control, ElementName=CC}">&#xf063;</Button>

                        <Button ToolTip="{e:Localize Duplicate widget}" Style="{StaticResource TitleButton}" Margin="1,0,1,0" HorizontalAlignment="Left" Command="{Binding ParentContainer.CopyCommand, ElementName=CC}" CommandParameter="{Binding ParentContainer.Control, ElementName=CC}">&#61839;</Button>
                        <Button ToolTip="{e:Localize Widget properties}" Style="{StaticResource TitleButton}" Margin="0,0,1,0" HorizontalAlignment="Left" Command="{Binding ParentContainer.SettingsCommand, ElementName=CC}" CommandParameter="{Binding ParentContainer.Control, ElementName=CC}">&#62611;</Button>
                        <Button ToolTip="{e:Localize Remove widget}" Style="{StaticResource TitleButton}" HorizontalAlignment="Left" Command="{Binding ParentContainer.CloseCommand, ElementName=CC}" CommandParameter="{Binding ParentContainer.Control, ElementName=CC}">&#61782;</Button>
                    </StackPanel>
                </Grid>
                <ContentControl x:Name="ContentControl" Content="{Binding ParentContainer.MainContent, ElementName=CC}">
                    <ContentControl.LayoutTransform>
                        <ScaleTransform ScaleX="{Binding ParentContainer.Control.Scale, ElementName=CC}" ScaleY="{Binding ParentContainer.Control.Scale, ElementName=CC}"/>
                    </ContentControl.LayoutTransform>
                </ContentControl>
            </StackPanel>
            <Grid x:Name="Overlay" Background="#7F00FFFF" Visibility="{Binding ParentContainer.Control.Selected, ElementName=CC, Converter={wpfc:BoolToVisibilityConverter}}" IsHitTestVisible="False"/>
            <local:vMixControlResizeThumb  IsEnabled="{Binding ParentContainer.Control.Locked, ElementName=CC, Converter={wpfc:BoolToInverseBoolConverter}}" Width="4" Cursor="SizeWE" Template="{StaticResource ResizeThumbTemplate}" DataContext="{Binding ParentContainer.Control,ElementName=CC}" Grid.ColumnSpan="2" HorizontalAlignment="Right"/>
            <local:vMixControlResizeThumb  IsEnabled="{Binding ParentContainer.Control.Locked, ElementName=CC, Converter={wpfc:BoolToInverseBoolConverter}}" Width="4" Cursor="SizeWE" Template="{StaticResource ResizeThumbTemplate}" DataContext="{Binding ParentContainer.Control,ElementName=CC}" Grid.ColumnSpan="2" HorizontalAlignment="Left"/>
            <local:vMixControlMoveThumb  IsEnabled="{Binding ParentContainer.Control.Locked, ElementName=CC, Converter={wpfc:BoolToInverseBoolConverter}}" x:Name="moveThumb" Tag="{Binding ParentContainer.Control.Info, ElementName=CC}" Visibility="Collapsed" Grid.ColumnSpan="3" Template="{StaticResource MoveThumbTemplate}" DataContext="{Binding ParentContainer.Control, ElementName=CC}" Cursor="SizeAll"/>
        </Grid>
    </Border>
</UserControl>
